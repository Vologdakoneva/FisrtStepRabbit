//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторного создания кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceTask
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="report", ConfigurationName="ServiceTask.TaskPortType")]
    public interface TaskPortType
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="report#Task:GetAllTask", ReplyAction="*")]
        System.Threading.Tasks.Task<ServiceTask.GetAllTaskResponse> GetAllTaskAsync(ServiceTask.GetAllTaskRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="report#Task:SaveTask", ReplyAction="*")]
        System.Threading.Tasks.Task<ServiceTask.SaveTaskResponse> SaveTaskAsync(ServiceTask.SaveTaskRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetAllTaskRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetAllTask", Namespace="report", Order=0)]
        public ServiceTask.GetAllTaskRequestBody Body;
        
        public GetAllTaskRequest()
        {
        }
        
        public GetAllTaskRequest(ServiceTask.GetAllTaskRequestBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute()]
    public partial class GetAllTaskRequestBody
    {
        
        public GetAllTaskRequestBody()
        {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetAllTaskResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetAllTaskResponse", Namespace="report", Order=0)]
        public ServiceTask.GetAllTaskResponseBody Body;
        
        public GetAllTaskResponse()
        {
        }
        
        public GetAllTaskResponse(ServiceTask.GetAllTaskResponseBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="report")]
    public partial class GetAllTaskResponseBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string @return;
        
        public GetAllTaskResponseBody()
        {
        }
        
        public GetAllTaskResponseBody(string @return)
        {
            this.@return = @return;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SaveTaskRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="SaveTask", Namespace="report", Order=0)]
        public ServiceTask.SaveTaskRequestBody Body;
        
        public SaveTaskRequest()
        {
        }
        
        public SaveTaskRequest(ServiceTask.SaveTaskRequestBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="report")]
    public partial class SaveTaskRequestBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string Datatask;
        
        public SaveTaskRequestBody()
        {
        }
        
        public SaveTaskRequestBody(string Datatask)
        {
            this.Datatask = Datatask;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SaveTaskResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="SaveTaskResponse", Namespace="report", Order=0)]
        public ServiceTask.SaveTaskResponseBody Body;
        
        public SaveTaskResponse()
        {
        }
        
        public SaveTaskResponse(ServiceTask.SaveTaskResponseBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="report")]
    public partial class SaveTaskResponseBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string @return;
        
        public SaveTaskResponseBody()
        {
        }
        
        public SaveTaskResponseBody(string @return)
        {
            this.@return = @return;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface TaskPortTypeChannel : ServiceTask.TaskPortType, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class TaskPortTypeClient : System.ServiceModel.ClientBase<ServiceTask.TaskPortType>, ServiceTask.TaskPortType
    {
        
        /// <summary>
        /// Реализуйте этот разделяемый метод для настройки конечной точки службы.
        /// </summary>
        /// <param name="serviceEndpoint">Настраиваемая конечная точка</param>
        /// <param name="clientCredentials">Учетные данные клиента.</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public TaskPortTypeClient(EndpointConfiguration endpointConfiguration) : 
                base(TaskPortTypeClient.GetBindingForEndpoint(endpointConfiguration), TaskPortTypeClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TaskPortTypeClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(TaskPortTypeClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TaskPortTypeClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(TaskPortTypeClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TaskPortTypeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ServiceTask.GetAllTaskResponse> ServiceTask.TaskPortType.GetAllTaskAsync(ServiceTask.GetAllTaskRequest request)
        {
            return base.Channel.GetAllTaskAsync(request);
        }
        
        public System.Threading.Tasks.Task<ServiceTask.GetAllTaskResponse> GetAllTaskAsync()
        {
            ServiceTask.GetAllTaskRequest inValue = new ServiceTask.GetAllTaskRequest();
            inValue.Body = new ServiceTask.GetAllTaskRequestBody();
            return ((ServiceTask.TaskPortType)(this)).GetAllTaskAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ServiceTask.SaveTaskResponse> ServiceTask.TaskPortType.SaveTaskAsync(ServiceTask.SaveTaskRequest request)
        {
            return base.Channel.SaveTaskAsync(request);
        }
        
        public System.Threading.Tasks.Task<ServiceTask.SaveTaskResponse> SaveTaskAsync(string Datatask)
        {
            ServiceTask.SaveTaskRequest inValue = new ServiceTask.SaveTaskRequest();
            inValue.Body = new ServiceTask.SaveTaskRequestBody();
            inValue.Body.Datatask = Datatask;
            return ((ServiceTask.TaskPortType)(this)).SaveTaskAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.TaskSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.TaskSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.TaskSoap))
            {
                return new System.ServiceModel.EndpointAddress("http://192.168.3.150:8080/ElPol_report_2/WS/Task/1cws/GetAllTask");
            }
            if ((endpointConfiguration == EndpointConfiguration.TaskSoap12))
            {
                return new System.ServiceModel.EndpointAddress("http://192.168.3.150:8080/ElPol_report_2/WS/Task/1cws/GetAllTask");
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            TaskSoap,
            
            TaskSoap12,
        }
    }
}
